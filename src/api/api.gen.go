// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all squads
	// (GET /squads)
	GetSquads(c *gin.Context)
	// Get squad info by its id
	// (GET /squads/{squad_id})
	GetSquadById(c *gin.Context, squadId int)
	// Get all squad members by squad id
	// (GET /squads/{squad_id}/members)
	GetSquadMembersById(c *gin.Context, squadId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetSquads operation middleware
func (siw *ServerInterfaceWrapper) GetSquads(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSquads(c)
}

// GetSquadById operation middleware
func (siw *ServerInterfaceWrapper) GetSquadById(c *gin.Context) {

	var err error

	// ------------- Path parameter "squad_id" -------------
	var squadId int

	err = runtime.BindStyledParameterWithOptions("simple", "squad_id", c.Param("squad_id"), &squadId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter squad_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSquadById(c, squadId)
}

// GetSquadMembersById operation middleware
func (siw *ServerInterfaceWrapper) GetSquadMembersById(c *gin.Context) {

	var err error

	// ------------- Path parameter "squad_id" -------------
	var squadId int

	err = runtime.BindStyledParameterWithOptions("simple", "squad_id", c.Param("squad_id"), &squadId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter squad_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSquadMembersById(c, squadId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/squads", wrapper.GetSquads)
	router.GET(options.BaseURL+"/squads/:squad_id", wrapper.GetSquadById)
	router.GET(options.BaseURL+"/squads/:squad_id/members", wrapper.GetSquadMembersById)
}
